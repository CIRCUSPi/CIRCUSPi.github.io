// mooncar
Blockly.Arduino.mooncar={};
Blockly.Arduino.mooncar_move_car=function(){
  var a=this.getFieldValue("STAT"),
      b=Blockly.Arduino.valueToCode(this,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"0";
  Blockly.Arduino.setups_["setup_mooncar_"]="pinMode(17, OUTPUT);\n  pinMode(12, OUTPUT);\n  pinMode(16, OUTPUT);\n  pinMode(13, OUTPUT);\n";

  if (a == "FORWARD") {
    return"analogWrite(17, "+b+");\nanalogWrite(12, 0);\nanalogWrite(16, "+b+");\nanalogWrite(13, 0);\n"
  } else if (a == "BACKWARD"){
    return"analogWrite(17, 0);\nanalogWrite(12, "+b+");\nanalogWrite(16, 0);\nanalogWrite(13, "+b+");\n"
  } else if (a == "LEFT") {
    return"analogWrite(17, 0);\nanalogWrite(12, "+b+");\nanalogWrite(16, "+b+");\nanalogWrite(13, 0);\n"
  } else if (a == "RIGHT") {
    return"analogWrite(17, "+b+");\nanalogWrite(12, 0);\nanalogWrite(16, 0);\nanalogWrite(13, "+b+");\n"
  } else {
    return"analogWrite(17, 0);\nanalogWrite(12, 0);\nanalogWrite(16, 0);\nanalogWrite(13, 0);\n"
  }
};
Blockly.Arduino.mooncar_move_motor=function(){
  var a=Blockly.Arduino.valueToCode(this,"SPEED_L",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"SPEED_R",Blockly.Arduino.ORDER_ATOMIC)||"0";
  Blockly.Arduino.definitions_.define_move_motor="void motor_LR(int ML, int MR)\n{\n  if (ML > 0) {\n    analogWrite(17, ML);\n    analogWrite(12, 0);\n  }else {\n    analogWrite(17, 0);\n    analogWrite(12, ML*(-1));\n  }\n  if (MR > 0) {\n    analogWrite(16, MR);\n    analogWrite(13, 0);\n  }else {\n    analogWrite(16, 0);\n    analogWrite(13, MR*(-1));\n  }\n}\n";
  Blockly.Arduino.setups_["setup_mooncar_"]="pinMode(17, OUTPUT);\n  pinMode(12, OUTPUT);\n  pinMode(16, OUTPUT);\n  pinMode(13, OUTPUT);\n";
  return"motor_LR("+a+", "+b+");\n";
};
Blockly.Arduino.mooncar_tracker=function(){
  Blockly.Arduino.definitions_.define_tracker="int tracker()\n{\n  if (digitalRead(10) == 1 && digitalRead(11) == 1) {\n    return 0;\n  } else if (digitalRead(10) == 0 && digitalRead(11) == 1) {\n    return 1;\n  } else if (digitalRead(10) == 1 && digitalRead(11) == 0){\n    return 2;\n  } else {\n    return 3;\n  }\n}\n";
  Blockly.Arduino.setups_["setup_tracker_"]="pinMode(10, INPUT);\n  pinMode(11, INPUT);\n";
  return["tracker()",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.mooncar_sonar=function(){
  Blockly.Arduino.definitions_['define_sonar_']="#include <Ultrasonic.h>\n";
  Blockly.Arduino.definitions_['define_sonar_set']="Ultrasonic ultrasonic_(2, 5);"
  return ["ultrasonic_.convert(ultrasonic_.timing(), Ultrasonic::CM)", Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.mooncar_button=function(){
  var a=this.getFieldValue("AB_BUTTON");
  Blockly.Arduino.setups_["setup_botton_"]="pinMode(0, INPUT_PULLUP);\n  pinMode(7, INPUT_PULLUP);\n";
  Blockly.Arduino.definitions_.define_button_a="bool a_button()\n{\n  if (digitalRead(0) == 0 && digitalRead(7) == 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";
  Blockly.Arduino.definitions_.define_button_b="bool b_button()\n{\n  if (digitalRead(0) == 1 && digitalRead(7) == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";
  Blockly.Arduino.definitions_.define_button_c="bool c_button()\n{\n  if (digitalRead(0) == 0 && digitalRead(7) == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";

  if (a == "A_") {
    return["a_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "B_") {
    return["b_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["c_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
};
Blockly.Arduino.mooncar_init_tcs=function(){
  var a=Blockly.Arduino.valueToCode(this,"RANGE",Blockly.Arduino.ORDER_ATOMIC)||"5";
  Blockly.Arduino.definitions_.define_write="#include <Wire.h>";
  Blockly.Arduino.definitions_.define_tcs="#include \"Adafruit_TCS34725.h\"";
  Blockly.Arduino.definitions_.define_tcs_var="int now[3], rec_r[3], rec_g[3], rec_b[3], rec_y[3], rec_a[3], rec_p[3], rec_c1[3], rec_c2[3], rec_c3[3], range_ = "+a+";";
  Blockly.Arduino.definitions_["define_class_tcs_"]="Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_24MS, TCS34725_GAIN_1X);";
  Blockly.Arduino.definitions_["define_class_tcs_init"]="uint16_t r_, g_, b_, c_;";
  Blockly.Arduino.definitions_.define_tcs_red="int tcs_read_red()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);\n  return r_;\n}\n";
  Blockly.Arduino.definitions_.define_tcs_green="int tcs_read_green()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);\n  return g_;\n}\n";
  Blockly.Arduino.definitions_.define_tcs_blue="int tcs_read_blue()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);\n  return b_;\n}\n";
  Blockly.Arduino.setups_["tcs_"]||(Blockly.Arduino.setups_["tcs_"]="tcs.begin();");
  return"digitalWrite(7, LOW);\n";
};
Blockly.Arduino.mooncar_read_tcs=function(){
  var a=this.getFieldValue("TCS");
  if (a == "RED") {
    return["tcs_read_red()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "GREEN") {
    return["tcs_read_green()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["tcs_read_blue()",Blockly.Arduino.ORDER_ATOMIC];
  }
};
Blockly.Arduino.mooncar_flash_light=function(){
  var a=this.getFieldValue("TCS_LIGHT");
  Blockly.Arduino.setups_["setup_flash_light_"]="pinMode(7, OUTPUT);\n";
  if (a == "ON") {
    return"digitalWrite(7, LOW);\n";
  }
  else {
    return"digitalWrite(7, HIGH);\n";
  }
};
Blockly.Arduino.mooncar_record_tcs=function(){
  var a=this.getFieldValue("RECORD_TCS");
  if (a == "RED") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_r[0] = r_;\nrec_r[1] = g_;\nrec_r[2] = b_;\n";
  }
  else if (a == "GREEN") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_g[0] = r_;\nrec_g[1] = g_;\nrec_g[2] = b_;\n";
  }
  else if (a == "BLUE") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_b[0] = r_;\nrec_b[1] = g_;\nrec_b[2] = b_;\n";
  }
  else if (a == "YELLO") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_y[0] = r_;\nrec_y[1] = g_;\nrec_y[2] = b_;\n";
  }
  else if (a == "AZURE") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_a[0] = r_;\nrec_a[1] = g_;\nrec_a[2] = b_;\n";
  }
  else if (a == "PURPLE") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_p[0] = r_;\nrec_p[1] = g_;\nrec_p[2] = b_;\n";
  }
  else if (a == "C1") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_c1[0] = r_;\nrec_c1[1] = g_;\nrec_c1[2] = b_;\n";
  }
  else if (a == "C2") {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_c2[0] = r_;\nrec_c2[1] = g_;\nrec_c2[2] = b_;\n";
  }
  else {
    return"delay(100);\ntcs.getRawData(&r_, &g_, &b_, &c_);\nrec_c3[0] = r_;\nrec_c3[1] = g_;\nrec_c3[2] = b_;\n";
  }
};
Blockly.Arduino.mooncar_chack_tcs=function(){
  var a=this.getFieldValue("RECORD_TCS");
  if (a == "RED") {
    Blockly.Arduino.definitions_.define_color_1="int tcs_check_1()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_r[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_1()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "GREEN") {
    Blockly.Arduino.definitions_.define_color_2="int tcs_check_2()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_g[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_2()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "BLUE") {
    Blockly.Arduino.definitions_.define_color_3="int tcs_check_3()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_b[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_3()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "YELLO") {
    Blockly.Arduino.definitions_.define_color_4="int tcs_check_4()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_y[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_4()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "AZURE") {
    Blockly.Arduino.definitions_.define_color_5="int tcs_check_5()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_a[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_5()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "PURPLE") {
    Blockly.Arduino.definitions_.define_color_6="int tcs_check_6()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_p[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_6()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "C1") {
    Blockly.Arduino.definitions_.define_color_7="int tcs_check_7()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_c1[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_7()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "C2") {
    Blockly.Arduino.definitions_.define_color_8="int tcs_check_8()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_c2[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_8()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    Blockly.Arduino.definitions_.define_color_9="int tcs_check_9()\n{\n  tcs.getRawData(&r_, &g_, &b_, &c_);now[0] = r_;now[1] = g_;now[2] = b_;int count = 0;for (int i=0;i<3;i++) {if (abs(now[i] - rec_c3[i]) < range_) {count += 1;}}if (count == 3) {return true;} else {return false;}\n}\n";
    return["tcs_check_9()",Blockly.Arduino.ORDER_ATOMIC];
  }
};
Blockly.Arduino.mooncar_ir_remote_read=function(){
  Blockly.Arduino.definitions_.define_irremote="#include <IRremote.h>";
  Blockly.Arduino.definitions_.define_irremote_init="IRrecv irrecv(15);";
  Blockly.Arduino.definitions_.define_irremote_decode="decode_results results;";
  Blockly.Arduino.setups_["irremote_"]||(Blockly.Arduino.setups_["irremote_"]="irrecv.enableIRIn();\n");
  return"if (irrecv.decode(&results)) {\n  "+Blockly.Arduino.statementToCode(this,"IR_READ")+"\n  irrecv.resume();\n}\n";
};
Blockly.Arduino.mooncar_ir_remote_read_value=function(){
  return["String(results.value, HEX)",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.mooncar_ir_remote_read_type=function(){
  Blockly.Arduino.definitions_.define_ir_type="String ir_type(int tip)\n{\n  if (tip == 1) {\n    return\"RC5\";\n  } else if (tip == 2){\n    return\"RC6\";\n  } else if (tip == 3){\n    return\"NEC\";\n  } else {\n    return\"Sony\";\n  }\n}\n";
  return["ir_type(results.decode_type)",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.mooncar_ir_remote_send=function(){
  var a=this.getFieldValue("IR_TYPE"),
      b=Blockly.Arduino.valueToCode(this,"IR_SEND",Blockly.Arduino.ORDER_ATOMIC)||"0";
  Blockly.Arduino.definitions_.define_irremote="#include <IRremote.h>";
  Blockly.Arduino.definitions_.define_irremote_init="IRsend irsend;";
  Blockly.Arduino.definitions_.define_ir_type="int x2i(char *s)\n{\n  int x = 0;\n  for(;;) {\n    char c = *s;\n    if (c >= '0' && c <= '9') {\n      x *= 16;\n      x += c - '0';\n    }    else if (c >= 'a' && c <= 'f') {\n      x *= 16;\n      x += (c - 'a') + 10;\n    }\n    else break;\n    s++;\n  }\n  return x;\n}";
  if (a == "NEC") {
    return"irsend.sendNEC(x2i("+b+"), 32);\n"
  } else if (a == "SONY"){
    return"irsend.sendSony(x2i("+b+"), 12);\n"
  } else if (a == "RC5") {
    return"irsend.sendRC5(x2i("+b+"), 12);\n"
  } else {
    return"irsend.sendRC6(x2i("+b+"), 20);\n"
  }
};

Blockly.Arduino.mooncar_face_show=function(){
  var a=this.getFieldValue("FACE_SHOW");
  //Blockly.Arduino.definitions_.define_irremote="#include <U8g2lib.h>";
  //Blockly.Arduino.definitions_.define_irremote_init="U8G2_SSD1306_128X64_NONAME_F_HW_I2C  u8g2(U8G2_R0 , 2);";
  //Blockly.Arduino.setups_["face_"]||(Blockly.Arduino.setups_["face_"]="u8g2.begin();");
  if (a == "F1") {
    Blockly.Arduino.definitions_.define_face_f1="const unsigned char F1[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F1);\nu8g2.sendBuffer();\n";
  } else if (a == "F2"){
    Blockly.Arduino.definitions_.define_face_f2="const unsigned char F2[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x03,0x00,0xfe,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x01,0x00,0xf8,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F2);\nu8g2.sendBuffer();\n";
  } else if (a == "F3"){
    Blockly.Arduino.definitions_.define_face_f3="const unsigned char F3[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x01,0x00,0xf8,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x03,0x00,0xfe,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x80,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F3);\nu8g2.sendBuffer();\n";
  } else if (a == "F4"){
    Blockly.Arduino.definitions_.define_face_f4="const unsigned char F4[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0xc0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x01,0x00,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0x00,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x0e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1f,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x80,0x7f,0x00,0x00,0xe0,0x1f,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0xc0,0x3f,0x00,0x00,0xfc,0xff,0x07,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0xc0,0x07,0x00,0x80,0xff,0xff,0xff,0x1f,0x00,0xe0,0x00,0xc0,0x3f,0x00,0x00,0x00,0x80,0x03,0x00,0xc0,0xff,0xff,0xff,0xff,0xff,0xff,0x01,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0xe0,0xff,0xff,0xff,0xff,0x01,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0xf8,0xff,0xff,0xff,0x01,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x80,0xff,0xff,0xff,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F4);\nu8g2.sendBuffer();\n";
  } else if (a == "F5"){
    Blockly.Arduino.definitions_.define_face_f5="const unsigned char F5[] U8X8_PROGMEM= {0x00,0x00,0xe0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0xe0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0xc0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x00,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0xfe,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x03,0x00,0x00,0x00,0x00,0x00,0xfc,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xfe,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x07,0x00,0x00,0x00,0x00,0xc0,0xff,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x1f,0x00,0x00,0x00,0x00,0xf0,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x3f,0x00,0x00,0x00,0x00,0xf8,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0x00,0x00,0x00,0x00,0xfe,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0x01,0x00,0x00,0x00,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xfd,0x03,0x00,0x00,0x00,0x7f,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xf9,0x03,0x00,0x00,0x00,0x3f,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xe3,0x03,0x00,0x00,0x00,0x0e,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xc3,0x01,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F5);\nu8g2.sendBuffer();\n";
  } else if (a == "F6"){
    Blockly.Arduino.definitions_.define_face_f6="const unsigned char F6[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xe3,0x07,0x00,0x00,0x00,0x00,0xf0,0xe3,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xc1,0x07,0x00,0x00,0x00,0x00,0xf0,0xc1,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xc1,0x0f,0x00,0x00,0x00,0x00,0xf8,0xc1,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x80,0x0f,0x00,0x00,0x00,0x00,0xf8,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x80,0x1f,0x00,0x00,0x00,0x00,0xf8,0x80,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x80,0x1f,0x00,0x00,0x00,0x00,0xfc,0x80,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x1f,0x00,0x00,0x00,0x00,0x7c,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x3f,0x00,0x00,0x00,0x00,0x7e,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x00,0x7e,0x00,0x00,0x00,0x00,0x3f,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x38,0x00,0x00,0x00,0x00,0x0e,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0xe0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x07,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x03,0x00,0x00,0x00,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x01,0x00,0x00,0x00,0xfe,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x7f,0x00,0x00,0x00,0x00,0xf8,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x3f,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x0f,0x00,0x00,0x00,0x00,0x80,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xfe,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x0f,0x00,0x00,0x00,0x00,0x80,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0x01,0x00,0x00,0x00,0xfc,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x01,0x00,0xfc,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0xff,0xff,0xff,0xff,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F6);\nu8g2.sendBuffer();\n";
  } else if (a == "F7"){
    Blockly.Arduino.definitions_.define_face_f7="const unsigned char F7[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0xe0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0xe0,0xf3,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xe3,0x07,0x00,0x00,0x00,0x00,0xf0,0xe3,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xc1,0x07,0x00,0x00,0x00,0x00,0xf0,0xc1,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xc1,0x0f,0x00,0x00,0x00,0x00,0xf8,0xc1,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x80,0x0f,0x00,0x00,0x00,0x00,0xf8,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x80,0x1f,0x00,0x00,0x00,0x00,0xf8,0x80,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x80,0x1f,0x00,0x00,0x00,0x00,0xfc,0x80,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x1f,0x00,0x00,0x00,0x00,0x7c,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x3f,0x00,0x00,0x00,0x00,0x7e,0x00,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x00,0x3e,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x00,0x7e,0x00,0x00,0x00,0x00,0x3f,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x1f,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x38,0x00,0x00,0x00,0x00,0x0e,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xfc,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1f,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x0f,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1f,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1f,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xfc,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F7);\nu8g2.sendBuffer();\n";
  } else if (a == "F8"){
    Blockly.Arduino.definitions_.define_face_f8="const unsigned char F8[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0xf0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0xf8,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0xfe,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x3e,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x3e,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x3f,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x1f,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0x80,0x1f,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x80,0x0f,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x80,0x0f,0xf8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xc0,0x0f,0xf8,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xc0,0x07,0xf0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xe0,0x07,0xf0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xe0,0x03,0xe0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xf0,0x03,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xf0,0x01,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0xf0,0x01,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x03,0x00,0x00,0x00,0xe0,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0xfe,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x01,0x00,0xc0,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x0f,0x00,0xf8,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0x81,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F8);\nu8g2.sendBuffer();\n";
  } else {
    Blockly.Arduino.definitions_.define_face_f9="const unsigned char F9[] U8X8_PROGMEM= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0xfe,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0xfe,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0xfe,0xff,0xff,0xff,0x7f,0x00,0x00,0x00,0xf0,0xff,0xff,0xff,0xff,0x03,0x00,0x00,0xfc,0xff,0xff,0xff,0x3f,0x00,0x00,0x00,0xe0,0xff,0xff,0xff,0xff,0x01,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0xc0,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xff,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xe7,0xff,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xff,0x00,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x3f,0x00,0xf8,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x1f,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0xc0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x03,0x00,0x00,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x01,0x00,0x00,0xfc,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x00,0x00,0xf0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x00,0xe0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};"
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, F9);\nu8g2.sendBuffer();\n";
  }
};

// EZ Start Kit
Blockly.Arduino.ez_start_kit={};
Blockly.Arduino.ez_start_kit_button=function(){
  var a=this.getFieldValue("AB_BUTTON");
  Blockly.Arduino.setups_["setup_botton_"]="pinMode(0, INPUT_PULLUP);\n  pinMode(7, INPUT_PULLUP);\n";
  Blockly.Arduino.definitions_.define_button_a="bool a_button()\n{\n  if (digitalRead(0) == 0 && digitalRead(7) == 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";
  Blockly.Arduino.definitions_.define_button_b="bool b_button()\n{\n  if (digitalRead(0) == 1 && digitalRead(7) == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";
  Blockly.Arduino.definitions_.define_button_c="bool c_button()\n{\n  if (digitalRead(0) == 0 && digitalRead(7) == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n";
  if (a == "A_") {
    return["a_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "B_") {
    return["b_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["c_button()",Blockly.Arduino.ORDER_ATOMIC];
  }
};
Blockly.Arduino.ez_start_kit_vr=function(){
  Blockly.Arduino.definitions_.define_vr="int vr_value()\n{\n  return analogRead(A2);\n}\n";
  Blockly.Arduino.setups_["setup_vr_"]="pinMode(A2, INPUT);\n";
  return["vr_value()",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.ez_start_kit_phr=function(){
  Blockly.Arduino.definitions_.define_phr="int phr_value()\n{\n  return analogRead(A1);\n}\n";
  Blockly.Arduino.setups_["setup_phr_"]="pinMode(A1, INPUT);\n";
  return["phr_value()",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.ez_start_kit_dht=function(){
  var a=this.getFieldValue("EZ_DHT");
  Blockly.Arduino.definitions_['define_dht_']="#include <DHT.h>\n";
  Blockly.Arduino.definitions_['define_dht_set']="DHT dht11_p10(10, DHT11);\n";
  Blockly.Arduino.setups_["setup_dht_"]="dht11_p10.begin();\n";
  if (a == "ez_t") {
    return["dht11_p10.readTemperature()",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["dht11_p10.readHumidity()",Blockly.Arduino.ORDER_ATOMIC];
  }
};
Blockly.Arduino.ez_start_kit_relay=function(){
  var a=this.getFieldValue("EZ_RELAY");
  Blockly.Arduino.setups_["setup_relaay_"]="pinMode(5, OUTPUT);\n";
  if (a == "ON") {
    return"digitalWrite(5, HIGH);\n";
  }
  else {
    return"digitalWrite(5, LOW);\n";
  }
};
Blockly.Arduino.ez_start_kit_remote_read=function(){
  Blockly.Arduino.definitions_.define_ez_irremote="#include <IRremote.h>";
  Blockly.Arduino.definitions_.define_ez_irremote_init="IRrecv irrecv(17);";
  Blockly.Arduino.definitions_.define_ez_irremote_decode="decode_results results;";
  Blockly.Arduino.setups_["ez_irremote_"]||(Blockly.Arduino.setups_["irremote_"]="irrecv.enableIRIn();\n");
  return"if (irrecv.decode(&results)) {\n  "+Blockly.Arduino.statementToCode(this,"IR_READ")+"\n  irrecv.resume();\n}\n";
};
Blockly.Arduino.ez_start_kit_ir_remote_read_value=function(){
  return["String(results.value, HEX)",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.ez_start_kit_ir_remote_read_type=function(){
  Blockly.Arduino.definitions_.define_ez_ir_type="String ir_type(int tip)\n{\n  if (tip == 1) {\n    return\"RC5\";\n  } else if (tip == 2){\n    return\"RC6\";\n  } else if (tip == 3){\n    return\"NEC\";\n  } else {\n    return\"Sony\";\n  }\n}\n";
  return["ir_type(results.decode_type)",Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.ez_start_kit_custom_tone=function(){
  var a=Blockly.Arduino.valueToCode(this,"FREQ",Blockly.Arduino.ORDER_ATOMIC)||0,
      b=Blockly.Arduino.valueToCode(this,"DURATION",Blockly.Arduino.ORDER_ATOMIC)||0;
  return"tone(14, "+a+", "+b+");\n"
};
Blockly.Arduino.ez_start_kit_tone=function(){
  var a=this.getFieldValue("FREQ");
  return"tone(14, "+a+");\n"
};
Blockly.Arduino.ez_start_kit_no_tone=function(){
  return"noTone(14);\n"
};
Blockly.Arduino.ez_start_kit_led=function(){
  var a=this.getFieldValue("EZ_LED"),
      b=Blockly.Arduino.valueToCode(this,"LVALUE",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (b < 0) {
    b = 0;
  }
  if (b > 255) {
    b = 255;
  }
  if (a == "red") {
    Blockly.Arduino.setups_["setup_red_"]="pinMode(13, OUTPUT);\n";
    return"analogWrite(13, "+b+");\n";
  }
  else if (a == "yellow") {
    Blockly.Arduino.setups_["setup_yellow_"]="pinMode(12, OUTPUT);\n";
    return"analogWrite(12, "+b+");\n";
  }
  else {
    Blockly.Arduino.setups_["setup_green_"]="pinMode(11, OUTPUT);\n";
    return"analogWrite(11, "+b+");\n";
  }
};
Blockly.Arduino.ez_start_kit_neopixel_begin=function(){
  var a=Blockly.Arduino.valueToCode(this,"NVALUE",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (a < 0) {
    a = 0;
  }
  if (a > 255) {
    a = 255;
  }
  Blockly.Arduino.definitions_.define_include_neopixel="#include <Adafruit_NeoPixel.h>\n";
  Blockly.Arduino.definitions_.define_neopixel="Adafruit_NeoPixel pixels = Adafruit_NeoPixel(3, 4,NEO_GRB + NEO_KHZ800);\n";
  Blockly.Arduino.setups_.setup_neopixel_begin="pixels.begin();\n";
  Blockly.Arduino.setups_.setup_neopixel_brightness="pixels.setBrightness("+a+");\n";
  return""
};
Blockly.Arduino.ez_start_kit_neopixel_setpixelcolor=function(){
  var a=Blockly.Arduino.valueToCode(this,"TARGET",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("RGB");
  return"pixels.setPixelColor("+a+",pixels.Color("+hexToR(b)+","+hexToG(b)+","+hexToB(b)+"));\n"
};
Blockly.Arduino.ez_start_kit_neopixel_custom_setpixelcolor=function(){
  var a=Blockly.Arduino.valueToCode(this,"TARGET",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"R",Blockly.Arduino.ORDER_ATOMIC)||"255",
      c=Blockly.Arduino.valueToCode(this,"G",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"B",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return"pixels.setPixelColor("+a+", pixels.Color("+b+","+c+","+d+"));\n"
};
Blockly.Arduino.ez_start_kit_neopixel_show=function(){
  return"pixels.show();\npixels.show();\n"
};

Blockly.Arduino.ez_start_kit_neopixel_clear=function(){
  Blockly.Arduino.definitions_.define_button_c="void neopixel_clear()\n{\npixels.setPixelColor(0,pixels.Color(0,0,0));\npixels.setPixelColor(1,pixels.Color(0,0,0));\npixels.setPixelColor(2,pixels.Color(0,0,0));\npixels.show();\npixels.show();\n }\n";
  return"neopixel_clear();\n"
};

Blockly.Arduino.ez_start_kit_oled_display_setting=function(){
  Blockly.Arduino.definitions_.define_wire='#include "Wire.h"';
  Blockly.Arduino.definitions_.define_u8g2_oled_include='#include "U8g2lib.h"';
  Blockly.Arduino.definitions_.define_u8g2_oled_declare="U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);";
  Blockly.Arduino.setups_.setup_define_u8g2_oled="u8g2.begin();\n  u8g2.setFont(u8g2_font_6x10_tf);\n  u8g2.setFontRefHeightExtendedText();\n  u8g2.setDrawColor(1);\n  u8g2.setFontPosTop();\n  u8g2.setFontDirection(0);\n";return""
};
Blockly.Arduino.ez_start_kit_oled_display_clear=function(){
  return"u8g2.clearDisplay();\n"
};
Blockly.Arduino.ez_start_kit_oled_display_draw_commands=function(){
  return"u8g2.firstPage();\ndo {\n"+Blockly.Arduino.statementToCode(this,"DRAW_CMD")+"\n  u8g2.sendBuffer();\n} while (u8g2.nextPage());\n"
};
Blockly.Arduino.ez_start_kit_oled_display_set_font=function(){
  return"u8g2.setFont("+this.getFieldValue("FONT")+");\n"
};
Blockly.Arduino.ez_start_kit_oled_display_set_album=function(){
  var a=this.getFieldValue("CUSTOM_ALBUM"),
      b=Blockly.Arduino.valueToCode(this,"ALBUM",Blockly.Arduino.ORDER_ATOMIC)||"";
  b=b.replace(/"/g,"");
  if (a == "C1") {
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album1_"+b]="const unsigned char C1[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C2"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album2_"+b]="const unsigned char C2[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C3"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album3_"+b]="const unsigned char C3[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C4"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album4_"+b]="const unsigned char C4[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C5"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album5_"+b]="const unsigned char C5[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C6"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album6_"+b]="const unsigned char C6[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C7"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album7_"+b]="const unsigned char C7[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C8"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album8_"+b]="const unsigned char C8[] U8X8_PROGMEM= {"+b+"};\n";
  } else if (a == "C9"){
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album9_"+b]="const unsigned char C9[] U8X8_PROGMEM= {"+b+"};\n";
  } else {
    Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album10_"+b]="const unsigned char C10[] U8X8_PROGMEM= {"+b+"};\n";
  }
  return""
};

Blockly.Arduino.ez_start_kit_oled_display_show_album=function(){
  var a=this.getFieldValue("CUSTOM_ALBUM");
  if (a == "C1") {
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C1);\nu8g2.sendBuffer();\n";
  } else if (a == "C2"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C2);\nu8g2.sendBuffer();\n";
  } else if (a == "C3"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C3);\nu8g2.sendBuffer();\n";
  } else if (a == "C4"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C4);\nu8g2.sendBuffer();\n";
  } else if (a == "C5"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C5);\nu8g2.sendBuffer();\n";
  } else if (a == "C6"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C6);\nu8g2.sendBuffer();\n";
  } else if (a == "C7"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C7);\nu8g2.sendBuffer();\n";
  } else if (a == "C8"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C8);\nu8g2.sendBuffer();\n";
  } else if (a == "C9"){
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C9);\nu8g2.sendBuffer();\n";
  } else {
    return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, C10);\nu8g2.sendBuffer();\n";
  }
};

Blockly.Arduino.ez_start_kit_oled_display_set_album2=function(){
  var a=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"",
      b=Blockly.Arduino.valueToCode(this,"Data",Blockly.Arduino.ORDER_ATOMIC)||"";
  a=a.replace(/"/g,"");
  b=b.replace(/"/g,"");
  Blockly.Arduino.definitions_["define_ez_start_kit_oled_display_set_album1_"+a]="const unsigned char "+a+"[] U8X8_PROGMEM= {"+b+"};\n";
  return""
};

Blockly.Arduino.ez_start_kit_oled_display_show_album2=function(){
  var a=Blockly.Arduino.valueToCode(this,"Name",Blockly.Arduino.ORDER_ATOMIC)||"";
  a=a.replace(/"/g,"");
  return"u8g2.clearBuffer();\nu8g2.drawXBMP(0, 0, 128, 64, "+a+");\nu8g2.sendBuffer();\n";

};

// RockBot
Blockly.Arduino.RockBot={};
Blockly.Arduino.RockBot_motor_go=function(){
  Blockly.Arduino.definitions_.define_RockBot="#include <Wire.h>\n";
  Blockly.Arduino.definitions_.define_Send_iic="void Send_iic(uint8_t Register, uint8_t Speed) {\n  Wire.beginTransmission(0x38);\n  Wire.write(Register);\n  Wire.write(Speed);\n  Wire.endTransmission();\n}\n";
  Blockly.Arduino.definitions_.define_Move_direction="void Move_direction(int8_t S1, int8_t S2, int8_t S3, int8_t S4) {\n  Send_iic(0x00, S1);\n  Send_iic(0x01, S2);\n  Send_iic(0x02, S3);\n  Send_iic(0x03, S4);\n}\n";
  Blockly.Arduino.setups_["setup_RockBot_"]="Wire.begin();\n";
  var a=this.getFieldValue("STATE"),
      s=Blockly.Arduino.valueToCode(this,"SPEED",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (s > 127) s = 127;
  if (s < 0) s = 0;

  if (a == "Move_forward") {
    return "Move_direction("+s+", "+s+", "+s+", "+s+");\n";
  } else if (a == "Move_back") {
    return "Move_direction("+s+"*(-1), "+s+"*(-1), "+s+"*(-1), "+s+"*(-1));\n";
  } else if (a == "Move_turnleft") {
    return "Move_direction("+s+"*(-1), "+s+", "+s+"*(-1), "+s+");\n";
  } else if (a == "Move_turnright") {
    return "Move_direction("+s+", "+s+"*(-1), "+s+", "+s+"*(-1));\n";
  } else if (a == "Move_left") {
    return "Move_direction("+s+"*(-1), "+s+", "+s+", "+s+"*(-1));\n";
  } else if (a == "Move_right") {
    return "Move_direction("+s+", "+s+"*(-1), "+s+"*(-1), "+s+");\n";
  } else if (a == "Move_frontright") {
    return "Move_direction("+s+", 0, 0, "+s+");\n";
  } else if (a == "Move_backleft") {
    return "Move_direction("+s+"*(-1), 0, 0, "+s+"*(-1));\n";
  } else if (a == "Move_frontleft") {
    return "Move_direction(0, "+s+", "+s+", 0);\n";
  } else if (a == "Move_backright") {
    return "Move_direction(0, "+s+"*(-1), "+s+"*(-1), 0);\n";
  } else {
    return "Move_direction(0, 0, 0, 0);\n";
  }
};

Blockly.Arduino.RockBot_motor_control=function(){
  Blockly.Arduino.definitions_.define_RockBot="#include <Wire.h>\n";
  Blockly.Arduino.definitions_.define_Send_iic="void Send_iic(uint8_t Register, uint8_t Speed) {\n  Wire.beginTransmission(0x38);\n  Wire.write(Register);\n  Wire.write(Speed);\n  Wire.endTransmission();\n}\n";
  Blockly.Arduino.definitions_.define_Move_direction="void Move_direction(int8_t S1, int8_t S2, int8_t S3, int8_t S4) {\n  Send_iic(0x00, S1);\n  Send_iic(0x01, S2);\n  Send_iic(0x02, S3);\n  Send_iic(0x03, S4);\n}\n";
  Blockly.Arduino.setups_["setup_RockBot_"]="Wire.begin();\n";

  var a=Blockly.Arduino.valueToCode(this,"LF",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"RF",Blockly.Arduino.ORDER_ATOMIC)||"0",
      c=Blockly.Arduino.valueToCode(this,"LB",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"RB",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (a > 127) a = 127;
  if (a < -127) a = -127;
  if (b > 127) b = 127;
  if (b < -127) b = -127;
  if (c > 127) c = 127;
  if (c < -127) c = -127;
  if (d > 127) d = 127;
  if (d < -127) d = -127;

  return "Move_direction("+a+", "+b+", "+c+", "+d+");\n";
};

Blockly.Arduino.RockBot_servo_control=function(){
  Blockly.Arduino.definitions_.define_RockBot="#include <Wire.h>\n";
  Blockly.Arduino.definitions_.define_Send_iic="void Send_iic(uint8_t Register, uint8_t Speed) {\n  Wire.beginTransmission(0x38);\n  Wire.write(Register);\n  Wire.write(Speed);\n  Wire.endTransmission();\n}\n";
  Blockly.Arduino.definitions_.define_Servo_angle="void Servo_angle(uint8_t Servo_ch, uint8_t degree) {\n  Send_iic((Servo_ch - 1) | 0x10 ,int(degree));\n}\n";
  Blockly.Arduino.setups_["setup_RockBot_"]="Wire.begin();\n";
  var a=this.getFieldValue("ServoNumber"),
      s=Blockly.Arduino.valueToCode(this,"degree",Blockly.Arduino.ORDER_ATOMIC)||"0";

  if (s > 90) s = 90;
  if (s < 0) s = 0;

  if (a == "S1") {
    return "Servo_angle(1, "+s+");\n";
  }
  else {
    return "Servo_angle(2, "+s+");\n";
  }
};
/*
Blockly.Arduino.RockBot_servo_pulse_control=function(){
  Blockly.Arduino.definitions_.define_RockBot="#include <Wire.h>\n";
  Blockly.Arduino.definitions_.define_Send_iic="void Send_iic(uint8_t Register, uint8_t Speed) {\n  Wire.beginTransmission(0x38);\n  Wire.write(Register);\n  Wire.write(Speed);\n  Wire.endTransmission();\n}\n";
  Blockly.Arduino.definitions_.define_Servo_pulse="void Servo_pulse(uint8_t Servo_ch, uint16_t width) {\n  width = min(2500, int(width));\n  width = max(500, int(width));\n  Send_iic((Servo_ch - 1) | 0x20, width);\n}\n";
  Blockly.Arduino.setups_["setup_RockBot_"]="Wire.begin();\n";
  var a=this.getFieldValue("ServoNumber"),
      s=Blockly.Arduino.valueToCode(this,"pulse",Blockly.Arduino.ORDER_ATOMIC)||"0";

  if (a == "S1") {
    return "Servo_pulse(1, "+s+");\n";
  }
  else {
    return "Servo_pulse(2, "+s+");\n";
  }
};
*/
Blockly.Arduino.IO_digital_write=function(){
  var a=this.getFieldValue("IO_PIN"),
      b=this.getFieldValue("STAT");
  Blockly.Arduino.setups_["setup_output_"+a]="pinMode("+a+", OUTPUT);";
  return "digitalWrite("+a+", "+b+");\n"
};

Blockly.Arduino.IO_digital_read=function(){
  var a=this.getFieldValue("IO_PIN");
  Blockly.Arduino.setups_["setup_input_"+a]||(Blockly.Arduino.setups_["setup_input_"+a]="pinMode("+a+", INPUT);");
  return["digitalRead("+a+")",Blockly.Arduino.ORDER_ATOMIC]
};

Blockly.Arduino.IO_analog_write=function(){
  var a=this.getFieldValue("IO_PIN"),
      b=Blockly.Arduino.valueToCode(this,"IO_value",Blockly.Arduino.ORDER_ATOMIC)||"255";
  Blockly.Arduino.setups_["setup_output_"+a]="pinMode("+a+", OUTPUT);";
  return"analogWrite("+a+", "+b+");\n"
};

Blockly.Arduino.IO_analog_read=function(){
  return["analogRead("+this.getFieldValue("IO_PIN")+")",Blockly.Arduino.ORDER_ATOMIC]
};

Blockly.Arduino.RockBot_custom_tone=function(){
  var a=Blockly.Arduino.valueToCode(this,"FREQ",Blockly.Arduino.ORDER_ATOMIC)||0,
      b=Blockly.Arduino.valueToCode(this,"DURATION",Blockly.Arduino.ORDER_ATOMIC)||0;
  return"tone(14, "+a+", "+b+");\n"
};

Blockly.Arduino.RockBot_tone=function(){
  var a=this.getFieldValue("FREQ");
  return"tone(14, "+a+");\n"
};

Blockly.Arduino.RockBot_no_tone=function(){
  return"noTone(14);\n"
};

Blockly.Arduino.RockBot_neopixel_begin=function(){
  var a=Blockly.Arduino.valueToCode(this,"NVALUE",Blockly.Arduino.ORDER_ATOMIC)||"0";
  if (a < 0) {
    a = 0;
  }
  if (a > 255) {
    a = 255;
  }
  Blockly.Arduino.definitions_.define_include_neopixel="#include <Adafruit_NeoPixel.h>\n";
  Blockly.Arduino.definitions_.define_neopixel="Adafruit_NeoPixel pixels = Adafruit_NeoPixel(2, 4,NEO_GRB + NEO_KHZ800);\n";
  Blockly.Arduino.setups_.setup_neopixel_begin="pixels.begin();\n";
  Blockly.Arduino.setups_.setup_neopixel_brightness="pixels.setBrightness("+a+");\n";
  return""
};

Blockly.Arduino.RockBot_neopixel_setpixelcolor=function(){
  var a=this.getFieldValue("light_IO"),
      b=this.getFieldValue("RGB");
  return"pixels.setPixelColor("+a+",pixels.Color("+hexToR(b)+","+hexToG(b)+","+hexToB(b)+"));\n"
};

Blockly.Arduino.RockBot_neopixel_custom_setpixelcolor=function(){
  var a=this.getFieldValue("light_IO"),
      b=Blockly.Arduino.valueToCode(this,"R",Blockly.Arduino.ORDER_ATOMIC)||"255",
      c=Blockly.Arduino.valueToCode(this,"G",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"B",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return"pixels.setPixelColor("+a+", pixels.Color("+b+","+c+","+d+"));\n"
};

Blockly.Arduino.RockBot_neopixel_show=function(){
  return"pixels.show();\npixels.show();\n"
};

Blockly.Arduino.RockBot_neopixel_clear=function(){
  Blockly.Arduino.definitions_.define_button_c="void neopixel_clear()\n{\npixels.setPixelColor(0,pixels.Color(0,0,0));\npixels.setPixelColor(1,pixels.Color(0,0,0));\npixels.setPixelColor(2,pixels.Color(0,0,0));\npixels.show();\npixels.show();\n }\n";
  return"neopixel_clear();\n"
};


// NFC/RFID
Blockly.Arduino.NFC_RFID={};
Blockly.Arduino.NFC_RFID_setup=function(){
  var a=Blockly.Arduino.valueToCode(this,"IRQ",Blockly.Arduino.ORDER_ATOMIC)||"0";
  Blockly.Arduino.definitions_.define_NFC_RFID="#include <Wire.h>\n#include <Adafruit_PN532.h>\n#define PN532_IRQ   ("+a+")\n#define PN532_RESET (0)\nAdafruit_PN532 nfc(PN532_IRQ, PN532_RESET);\n";
  Blockly.Arduino.setups_.setup_define_NFC_RFID="nfc.begin();\n  nfc.SAMConfig();\n";
  return""
};

Blockly.Arduino.NFC_RFID_read=function(){
  Blockly.Arduino.definitions_.define_read_RFID="String read_RFID() {\n uint8_t success;\n uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n uint8_t uidLength;\n success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n  if (success) {\n    if (uidLength == 4) {\n      uint32_t cardid;\n       cardid = uid[0];\n       cardid <<= 8;\n       cardid |= uid[1];\n       cardid <<= 8;\n       cardid |= uid[2];\n       cardid <<= 8;\n       cardid |= uid[3];\n       return String(cardid, HEX);\n     } \n   }else {\n      return \"Error\";\n  }\n}\n";
  return["read_RFID()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.NFC_RFID_read_block=function(){
  var a=Blockly.Arduino.valueToCode(this,"SECTOR",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"BLOCK",Blockly.Arduino.ORDER_ATOMIC)||"0";
  Blockly.Arduino.definitions_.define_read_BLOCK="String Read_Sector_Block(byte sec, byte blo) {\n  uint8_t success;\n  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n  uint8_t uidLength;\n  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n  uint8_t data[16];\n  uint8_t keyuniversal[6] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };\n  success = nfc.mifareclassic_AuthenticateBlock (uid, uidLength, blo, sec, keyuniversal);\n  success = nfc.mifareclassic_ReadDataBlock(blo, data);\n  if (success) {\n    if (uidLength == 4) {  \n      uint32_t cardid;\n      cardid = data[0];\n      cardid <<= 8;\n      cardid |= data[1];\n      cardid <<= 8;\n      cardid |= data[2];\n      cardid <<= 8;\n      cardid |= data[3];\n      return String(cardid, HEX);\n    }\n  }\n  else {\n    return \"Error\";\n  }\n}\n";

  return["Read_Sector_Block("+a+", "+b+")",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.NFC_RFID_write_block=function(){
  var a=Blockly.Arduino.valueToCode(this,"SECTOR",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"Data",Blockly.Arduino.ORDER_ATOMIC)||"";
  Blockly.Arduino.definitions_.define_read_BLOCK="void rfid_writer(byte sec, const char * url_) {\n  const char * url = url_;\n  uint8_t ndefprefix = NDEF_URIPREFIX_HTTP_WWWDOT;\n  uint8_t success;\n  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n  uint8_t uidLength;\n  bool authenticated = false;\n  uint8_t keya[6] = { 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5 };\n  uint8_t keyb[6] = { 0xD3, 0xF7, 0xD3, 0xF7, 0xD3, 0xF7 };\n  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n  if (success){\n    nfc.PrintHex(uid, uidLength);\n    if (uidLength != 4){\n      return;\n    }\n    success = nfc.mifareclassic_AuthenticateBlock (uid, uidLength, 4, 0, keyb);\n    if (!success){\n      return;\n    }\n    if (strlen(url) > 38){\n      return;\n    }\n    success = nfc.mifareclassic_WriteNDEFURI(sec, ndefprefix, url);\n  }\n}\n";
  return"rfid_writer("+a+", "+b+");\n";
};

Blockly.Arduino.NFC_RFID_format=function(){
  Blockly.Arduino.definitions_.define_NFC_RFID_Write="const char * url = \"adafruit.com\";\nuint8_t ndefprefix = NDEF_URIPREFIX_HTTP_WWWDOT;\n";
  Blockly.Arduino.definitions_.define_read_BLOCK="void clearn() {\n  uint8_t success;\n  uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };\n  uint8_t uidLength;\n  bool authenticated = false;\n  uint8_t keya[6] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };\n  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);\n  if (success){\n    nfc.PrintHex(uid, uidLength);\n    success = nfc.mifareclassic_AuthenticateBlock (uid, uidLength, 0, 0, keya);\n    if (!success){\n      return;\n    }\n    success = nfc.mifareclassic_FormatNDEF();\n    if (!success){\n      return;\n    }\n    success = nfc.mifareclassic_AuthenticateBlock (uid, uidLength, 4, 0, keya);\n    if (!success){\n      return;\n    }\n    if (strlen(url) > 38){\n      return;\n    }\n    success = nfc.mifareclassic_WriteNDEFURI(1, ndefprefix, url);\n    if (success){\n      Serial.println(\"NDEF URI Record written to sector 1\");\n    }\n    else{\n      Serial.println(\"NDEF Record creation failed! :(\");\n;    }\n  }\n}\n";
  return"clearn();\n";
};

Blockly.Arduino.mfrc522_read_nostop=function(){
  Blockly.Arduino.definitions_.define_spi_include="#include <SPI.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_include="#include <MFRC522.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst="MFRC522 rfid(/*SS_PIN*/ 10, /*RST_PIN*/ UINT8_MAX);\n";
  Blockly.Arduino.definitions_.define_mfrc522_readid_nostop='\nString mfrc522_readID_nostop()\n{\n  String ret;\n  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial())\n  {\n    MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);\n\n    for (byte i = 0; i < rfid.uid.size; i++) {\n      ret += (rfid.uid.uidByte[i] < 0x10 ? "0" : "");\n      ret += String(rfid.uid.uidByte[i], HEX);\n    }\n  }\n  return ret;\n}\n';
  Blockly.Arduino.setups_.setup_mfrc522="SPI.begin();\n  rfid.PCD_Init();\n";
  return["mfrc522_readID_nostop()",Blockly.Arduino.ORDER_ATOMIC]
};

Blockly.Arduino.mfrc522_read_block=function(){
  var a=Blockly.Arduino.valueToCode(this,"SECTOR",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"BLOCK",Blockly.Arduino.ORDER_ATOMIC)||"0";

  Blockly.Arduino.definitions_.define_spi_include="#include <SPI.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_include="#include <MFRC522.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst="MFRC522 rfid(10, UINT8_MAX);\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst2="MFRC522::MIFARE_Key key;\nbyte buffer[18];\nMFRC522::StatusCode status;\n";

  Blockly.Arduino.definitions_.define_mfrc522_read_BLOCK="String readBlock(byte _sector, byte _block, byte _blockData[])  {\n  if (_sector < 0 || _sector > 15 || _block < 0 || _block > 3) {\n    return \"error\";\n  }\n  byte blockNum = _sector * 4 + _block;\n  byte trailerBlock = _sector * 4 + 3;\n  status = (MFRC522::StatusCode) rfid.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(rfid.uid));\n  if (status != MFRC522::STATUS_OK) {\n    return \"error\";\n  }\n  byte buffersize = 18;\n  status = (MFRC522::StatusCode) rfid.MIFARE_Read(blockNum, _blockData, &buffersize);\n  if (status != MFRC522::STATUS_OK) {\n    return \"error\";\n  }\n  String outputText = String((char*)buffer);\n  return outputText;\n}\n";

  Blockly.Arduino.setups_.setup_mfrc522="SPI.begin();\n  rfid.PCD_Init();\n";
  Blockly.Arduino.setups_.setup_mfrc522_2="for (byte i = 0; i < 6; i++) {\n    key.keyByte[i] = 0xFF;\n  }\n";

  return["readBlock("+a+", "+b+", buffer)",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.mfrc522_write_block=function(){
  var a=Blockly.Arduino.valueToCode(this,"SECTOR",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"BLOCK",Blockly.Arduino.ORDER_ATOMIC)||"0",
      c=Blockly.Arduino.valueToCode(this,"Data",Blockly.Arduino.ORDER_ATOMIC)||"";
  Blockly.Arduino.definitions_.define_spi_include="#include <SPI.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_include="#include <MFRC522.h>\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst="MFRC522 rfid(10, UINT8_MAX);\n";
  Blockly.Arduino.definitions_.define_mfrc522_inst2="MFRC522::MIFARE_Key key;\nbyte buffer[18];\nMFRC522::StatusCode status;\n";
  Blockly.Arduino.definitions_.define_mfrc522_write_BLOCK="void writeBlock(byte _sector, byte _block, String _writeText) {\n  byte _blockData[16] = \"\";\n  _writeText.getBytes(_blockData, _writeText.length() + 1);\n  if (_sector < 0 || _sector > 15 || _block < 0 || _block > 3) {\n    return;\n  }\n  if (_sector == 0 && _block == 0) {\n    return;\n  }\n  byte blockNum = _sector * 4 + _block;\n  byte trailerBlock = _sector * 4 + 3;\n  status = (MFRC522::StatusCode) rfid.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(rfid.uid));\n  if (status != MFRC522::STATUS_OK) {\n    return;\n  }\n  status = (MFRC522::StatusCode) rfid.MIFARE_Write(blockNum, _blockData, 16);\n  if (status != MFRC522::STATUS_OK) {\n    return;\n  }\n}\n"
  Blockly.Arduino.setups_.setup_mfrc522="SPI.begin();\n  rfid.PCD_Init();\n";
  Blockly.Arduino.setups_.setup_mfrc522_2="for (byte i = 0; i < 6; i++) {\n  key.keyByte[i] = 0xFF;\n}\n";
  return"writeBlock("+a+", "+b+", "+c+");\n";
};

Blockly.Arduino.mfrc522_stop=function(){
  return"rfid.PICC_HaltA();\nrfid.PCD_StopCrypto1();\n";
};

// M5Stack Stick V / Unit V
Blockly.Arduino.m5_stack_v={};
Blockly.Arduino.m5_stack_v_serial_set=function(){
  var a=this.getFieldValue("RX_PIN"),
      b=this.getFieldValue("TX_PIN");
  Blockly.Arduino.definitions_.define_serial_set_include="#include <SoftwareSerial.h>\n";
  Blockly.Arduino.definitions_.define_serial_set_receive_inst="SoftwareSerial Serial2_("+a+", "+b+");\n";
  Blockly.Arduino.definitions_.define_serial_set_function='String Data_Main_Receive() {\n  char result_buf[256] = "";\n  if (Serial2_.available() > 0) {\n    int recv_len = Serial2_.readBytesUntil(\'\\r\', result_buf, 256);\n    Serial2_.flush();\n    String message_ = "";\n    for (int i=0; i<256; i++) {\n      message_ += String(result_buf[i]);\n    }\n    return message_;\n  }\n  else {\n    return "None";\n  }\n}\n';
  Blockly.Arduino.setups_.setup_serial_set_inst="Serial2_.begin(115200);\n";
  return""
};

Blockly.Arduino.m5_stack_v_motion_detect_mode=function(){
  Blockly.Arduino.definitions_.define_motion_detect_mode='void Motion_Detect_mode_Send(int mode_) {\n  String TT;\n  char input_[100] = "";\n  if (mode_ == 0) {\n    TT = "{\\"MOTION DETECT\\": 1.0, \\"mode\\": \\"COMPUTE_MODE_STATIC\\"}";\n    TT.toCharArray(input_, 100);\n    Serial2_.print(input_);\n  }\n  else {\n    TT = "{\\"MOTION DETECT\\": 1.0, \\"mode\\": \\"COMPUTE_MODE_DYNAMIC\\"}";\n    TT.toCharArray(input_, 100);\n    Serial2_.print(input_);\n  }\n}\n';
  var a=this.getFieldValue("m5_motion_detect_mode");
  if (a == "m5_static") {
    return "for(int i=0;i<3;i++){Motion_Detect_mode_Send(0);delay(50);}\n";
  }
  else {
    return "for(int i=0;i<3;i++){Motion_Detect_mode_Send(1);delay(50);}\n";
  }
};

Blockly.Arduino.m5_stack_v_motion_detect_thr=function(){
  Blockly.Arduino.definitions_.define_motion_detect_thr='void Motion_Detect_thr_Send(int thr_) {\n  String TT;\n  char input_[100] = "";\n  TT = "{\\"MOTION DETECT\\": 1.0, \\"delta\\": " + String(thr_) + "}";\n  TT.toCharArray(input_, 100);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"thr_",Blockly.Arduino.ORDER_ATOMIC)||"20";
  if (a < 0) {a = 0;}
  if (a > 99) {a = 99;}
  return "for(int i=0;i<3;i++){Motion_Detect_thr_Send("+a+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_motion_detect_scan=function(){
  Blockly.Arduino.definitions_.define_motion_detect_scan='void Motion_Detect_scan_Send(int scanx_, int scany_) {\n  String TT;\n  char input_[100] = "";\n  TT = "{\\"MOTION DETECT\\": 1.0, \\"stepy\\": " + String(scany_) + ", \\"stepx\\": " + String(scanx_) + "}";\n  TT.toCharArray(input_, 100);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"scanx_",Blockly.Arduino.ORDER_ATOMIC)||"1",
      b=Blockly.Arduino.valueToCode(this,"scany_",Blockly.Arduino.ORDER_ATOMIC)||"2";
  if (a < 0) {a = 0;}
  if (a > 40) {a = 40;}
  if (b < 0) {b = 0;}
  if (b > 40) {b = 40;}
  return "for(int i=0;i<3;i++){Motion_Detect_scan_Send("+a+", "+b+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_motion_detect_main=function(){
  Blockly.Arduino.definitions_.define_motion_detect_main='String Motion_Detect_Main_(int data_) {\n  String new_Text_ = Data_Main_Receive();\n  if (new_Text_ == "None") {\n    return "None";\n  }\n  else {\n    int diff_total = new_Text_.indexOf(",\\"DIFF TOTAL\\":");\n    int diff_max = new_Text_.indexOf(",\\"DIFF MAX\\":");\n    int total = new_Text_.indexOf(",\\"TOTAL\\":");\n    if (data_ == 0) {\n      String diff_total_;\n      for (int i=diff_total+14; i<diff_max; i++) {\n        diff_total_ += new_Text_[i];\n      }\n      return diff_total_;\n    }\n    else if (data_ == 1) {\n      String diff_max_;\n      for (int i=diff_max+12; i<total; i++) {\n        diff_max_ += new_Text_[i];\n      }\n      return diff_max_;\n    }\n    else {\n      String total_ = String(new_Text_[total+9]);\n      return total_;\n    }\n  }\n}\n';
  var a=this.getFieldValue("m5_stack_v_motion_detect_main");
  if (a == "m5_diff_total") {
    return["Motion_Detect_Main_(0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "m5_diff_max") {
    return["Motion_Detect_Main_(1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Motion_Detect_Main_(2)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_motion_detect_data=function(){
  Blockly.Arduino.definitions_.define_motion_detect_data='String Motion_Detect_data_(int box_, int data_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int x = new_Text_.indexOf("{\\"x\\":");\n    int y = new_Text_.indexOf(",\\"y\\":");\n    int w = new_Text_.indexOf(",\\"w\\":");\n    int h = new_Text_.indexOf(",\\"h\\":");\n    int area = new_Text_.indexOf(",\\"area\\":");\n    int ends = new_Text_.indexOf("}");\n    if (data_ == 0) {\n      String x_;\n      for (int i=x+5; i<y; i++) {\n        x_ += new_Text_[i];\n      }\n      return x_;\n    }\n    else if (data_ == 1) {\n      String y_;\n      for (int i=y+5; i<w; i++) {\n        y_ += new_Text_[i];\n      }\n      return y_;\n    }\n    else if (data_ == 2) {\n      String w_;\n      for (int i=w+5; i<h; i++) {\n        w_ += new_Text_[i];\n      }\n      return w_;\n    }\n    else if (data_ == 3) {\n      String h_;\n      for (int i=h+5; i<area; i++) {\n        h_ += new_Text_[i];\n      }\n      return h_;\n    }\n    else {\n      String area_;\n      for (int i=area+8; i<ends; i++) {\n\n        area_ += new_Text_[i];\n      }\n      return area_;\n    }\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("m5_stack_v_motion_detect_data");

  if (b == "m5_x") {
    return["Motion_Detect_data_("+a+", 0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_y") {
    return["Motion_Detect_data_("+a+", 1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_w") {
    return["Motion_Detect_data_("+a+", 2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_h") {
    return["Motion_Detect_data_("+a+", 3)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Motion_Detect_data_("+a+", 4)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_target_trace_set=function(){
  Blockly.Arduino.definitions_.define_target_trace_set='void Target_Trace_Send(int x_, int y_, int w_, int h_) {\n    String TT = "{\\"TARGET TRACKER\\":\\" V1.0\\",\\"x\\":" + String(x_) + ",\\"y\\":" + String(y_) + ",\\"w\\":" + String(w_) + ",\\"h\\":" + String(h_) + "}";\n    char input_[256] = "";\n    TT.toCharArray(input_, 256);\n    Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"x_",Blockly.Arduino.ORDER_ATOMIC)||"140",
      b=Blockly.Arduino.valueToCode(this,"y_",Blockly.Arduino.ORDER_ATOMIC)||"100",
      c=Blockly.Arduino.valueToCode(this,"w_",Blockly.Arduino.ORDER_ATOMIC)||"40",
      d=Blockly.Arduino.valueToCode(this,"h_",Blockly.Arduino.ORDER_ATOMIC)||"40";
  return "for(int i=0;i<3;i++){Target_Trace_Send("+a+", "+b+", "+c+", "+d+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_target_trace_read=function(){
  Blockly.Arduino.definitions_.define_motion_detect_data='String Target_Trace_data_(int data_) {\n  String new_Text_ = Data_Main_Receive();\n  if (new_Text_ == "None") {\n    return "None";\n  }\n  else {\n    int x = new_Text_.indexOf(",\\"x\\":");\n    int y = new_Text_.indexOf(",\\"y\\":");\n    int w = new_Text_.indexOf(",\\"w\\":");\n    int h = new_Text_.indexOf(",\\"h\\":");\n    int ends = new_Text_.indexOf("}");\n        if (data_ == 0) {\n      String x_;\n      for (int i=x+5; i<y; i++) {\n        x_ += new_Text_[i];\n      }\n      return x_;\n    }\n    else if (data_ == 1) {\n      String y_;\n      for (int i=y+5; i<w; i++) {\n        y_ += new_Text_[i];\n      }\n      return y_;\n    }\n    else if (data_ == 2) {\n      String w_;\n      for (int i=w+5; i<h; i++) {\n        w_ += new_Text_[i];\n      }\n      return w_;\n    }\n    else {\n      String h_;\n      for (int i=h+5; i<ends; i++) {\n        h_ += new_Text_[i];\n      }\n      return h_;\n    }\n  }\n}\n';
  var a=this.getFieldValue("m5_stack_v_target_trace_data");

  if (a == "m5_x") {
    return["Target_Trace_data_(0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "m5_y") {
    return["Target_Trace_data_(1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "m5_w") {
    return["Target_Trace_data_(2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Target_Trace_data_(3)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_color_trace_lab=function(){
  Blockly.Arduino.definitions_.define_color_trace_lab='void Color_Trace_LAB(int Lmin_, int Lmax_, int Amin_, int Amax_, int Bmin_, int Bmax_) {\n  String TT;\n  char input_[128] = "";\n  TT = "{\\"COLOR TRACKER\\": 1.0, \\"Amax\\": " + String(Amax_) + ", \\"Lmin\\": " + String(Lmin_) + ", \\"Bmax\\": " + String(Bmax_) + ", \\"Bmin\\": " + String(Bmin_) + ", \\"Lmax\\": " + String(Lmax_) + ", \\"Amin\\": " + String(Amin_) + "}";\n  TT.toCharArray(input_, 128);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"Lmin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"Lmax_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      c=Blockly.Arduino.valueToCode(this,"Amin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"Amax_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      e=Blockly.Arduino.valueToCode(this,"Bmin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      f=Blockly.Arduino.valueToCode(this,"Bmax_",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return "for(int i=0;i<3;i++){Color_Trace_LAB("+a+", "+b+", "+c+", "+d+", "+e+", "+f+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_color_trace_scan=function(){
  Blockly.Arduino.definitions_.define_color_trace_scan='void Color_Trace_Scan(int scanx_, int scany_) {\n  String TT;\n  char input_[100] = "";\n  TT = "{\\"COLOR TRACKER\\": 1.0, \\"stepy\\": " + String(scany_) + ", \\"stepx\\": " + String(scanx_) + "}";\n  TT.toCharArray(input_, 100);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"scanx_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"scany_",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return "for(int i=0;i<3;i++){Color_Trace_Scan("+a+", "+b+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_color_trace_merge=function(){
  Blockly.Arduino.definitions_.define_color_trace_merge='void Color_Trace_Merge(int mer_) {\n  String TT;\n  char input_[100] = "";\n  TT = "{\\"COLOR TRACKER\\": 1.0, \\"merge\\": " + String(mer_) + "}";\n  TT.toCharArray(input_, 100);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"mer_",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return "for(int i=0;i<3;i++){Color_Trace_Merge("+a+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_color_trace_thr=function(){
  Blockly.Arduino.definitions_.define_color_trace_thr='void Color_Trace_Thr(int thrw_, int thrh_) {\n  String TT;\n  char input_[100] = "";\n  TT = "{\\"COLOR TRACKER\\": 1.0, \\"thr_h\\": " + String(thrh_) + ", \\"thr_w\\": " + String(thrw_) + "}";\n  TT.toCharArray(input_, 100);\n  Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"thrw_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"thrh_",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return "for(int i=0;i<3;i++){Color_Trace_Thr("+a+", "+b+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_color_trace_count=function(){
  Blockly.Arduino.definitions_.define_color_trace_count='String Color_Trace_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"TOTAL\\":");\n    String retotal_ = String(Text_[total_+8]);\n    return retotal_;\n  }\n}\n';
  return["Color_Trace_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_color_trace_data=function(){
  Blockly.Arduino.definitions_.define_color_trace_data='String Color_Trace_data_(int box_, int data_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int x = new_Text_.indexOf("{\\"x\\":");\n    int y = new_Text_.indexOf(",\\"y\\":");\n    int w = new_Text_.indexOf(",\\"w\\":");\n    int h = new_Text_.indexOf(",\\"h\\":");\n    int area = new_Text_.indexOf(",\\"area\\":");\n    int ends = new_Text_.indexOf("}");\n      if (data_ == 0) {\n      String x_;\n      for (int i=x+5; i<y; i++) {\n        x_ += new_Text_[i];\n      }\n      return x_;\n    }\n    else if (data_ == 1) {\n      String y_;\n      for (int i=y+5; i<w; i++) {\n        y_ += new_Text_[i];\n      }\n      return y_;\n    }\n    else if (data_ == 2) {\n      String w_;\n      for (int i=w+5; i<h; i++) {\n        w_ += new_Text_[i];\n      }\n      return w_;\n    }\n    else if (data_ == 3) {\n      String h_;\n      for (int i=h+5; i<area; i++) {\n        h_ += new_Text_[i];\n      }\n      return h_;\n    }\n    else {\n      String area_;\n      for (int i=area+8; i<ends; i++) {\n        area_ += new_Text_[i];\n      }\n      return area_;\n    }\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("m5_stack_v_color_trace_data");

  if (b == "m5_x") {
    return["Color_Trace_data_("+a+", 0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_y") {
    return["Color_Trace_data_("+a+", 1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_w") {
    return["Color_Trace_data_("+a+", 2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_h") {
    return["Color_Trace_data_("+a+", 3)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Color_Trace_data_("+a+", 4)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_face_detect_count=function(){
  Blockly.Arduino.definitions_.define_face_detect_count='String Face_Detect_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"count\\":");\n    String retotal_ = String(Text_[total_+9]);\n    return retotal_;\n  }\n }\n';
  return["Face_Detect_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_face_detect_data=function(){
  Blockly.Arduino.definitions_.define_face_detect_data='String Face_Detect_data_(int box_, int data_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int x = new_Text_.indexOf("{\\"x\\":");\n    int y = new_Text_.indexOf(", \\"y\\":");\n    int w = new_Text_.indexOf(", \\"w\\":");\n    int h = new_Text_.indexOf(", \\"h\\":");\n    int valu = new_Text_.indexOf(", \\"value\\":");\n    int ends = new_Text_.indexOf(", \\"classid\\":");\n      if (data_ == 0) {\n      String x_;\n      for (int i=x+5; i<y; i++) {\n        x_ += new_Text_[i];\n      }\n      return x_;\n    }\n    else if (data_ == 1) {\n      String y_;\n      for (int i=y+6; i<w; i++) {\n        y_ += new_Text_[i];\n      }\n      return y_;\n    }\n    else if (data_ == 2) {\n      String w_;\n      for (int i=w+6; i<h; i++) {\n        w_ += new_Text_[i];\n      }\n      return w_;\n    }\n    else if (data_ == 3) {\n      String h_;\n      for (int i=h+6; i<valu; i++) {\n        h_ += new_Text_[i];\n      }\n      return h_;\n    }\n    else {\n      String value_;\n      for (int i=valu+10; i<ends; i++) {\n        value_ += new_Text_[i];\n      }\n      return value_;\n    }\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("m5_stack_v_face_detect_data");

  if (b == "m5_x") {
    return["Face_Detect_data_("+a+", 0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_y") {
    return["Face_Detect_data_("+a+", 1)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_w") {
    return["Face_Detect_data_("+a+", 2)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (b == "m5_h") {
    return["Face_Detect_data_("+a+", 3)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Face_Detect_data_("+a+", 4)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_qr_code_set=function(){
  Blockly.Arduino.definitions_.define_qr_code_set='void QR_Mode_Send() {\n    String TT = "{\\"mode\\": \\"QRCODE\\", \\"FIND CODE\\": 1.0}";\n    char input_[64] = "";\n    TT.toCharArray(input_, 64);\n    Serial2_.print(input_);\n}\n';
  return "for(int i=0;i<3;i++){QR_Mode_Send();delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_qr_code_count=function(){
  Blockly.Arduino.definitions_.define_qr_code_count='String QR_Code_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"count\\":");\n    String retotal_ = String(Text_[total_+9]);\n    return retotal_;\n  }\n }\n';
  return["QR_Code_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_qr_code_data=function(){
  Blockly.Arduino.definitions_.define_qr_code_data='String QR_Code_data_(int box_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int payload = new_Text_.indexOf("\\"payload\\":");\n    int ends = new_Text_.indexOf(", \\"version\\":");\n    String payload_;\n    for (int i=payload+10; i<ends; i++) {\n      payload_ += new_Text_[i];\n    }\n    return payload_;\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return["QR_Code_data_("+a+")",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_bar_code_set=function(){
  Blockly.Arduino.definitions_.define_bar_code_set='void Bar_Code_Send() {\n    String TT = "{\\"mode\\": \\"BARCODE\\", \\"FIND CODE\\": 1.0}";\n    char input_[64] = "";\n    TT.toCharArray(input_, 64);\n    Serial2_.print(input_);\n}\n';
  return "for(int i=0;i<3;i++){Bar_Code_Send();delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_bar_code_count=function(){
  Blockly.Arduino.definitions_.define_bar_code_count='String Bar_Code_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"count\\":");\n    String retotal_ = String(Text_[total_+9]);\n    return retotal_;\n  }\n}\n';
  return["Bar_Code_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_bar_code_data=function(){
  Blockly.Arduino.definitions_.define_bar_code_data='String Bar_Code_data_(int box_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int payload = new_Text_.indexOf("\\"payload\\":");\n    int ends = new_Text_.indexOf(", \\"type\\":");\n    String payload_;\n    for (int i=payload+10; i<ends; i++) {\n      payload_ += new_Text_[i];\n    }\n    return payload_;\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return["Bar_Code_data_("+a+")",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_datamatrix_code_set=function(){
  Blockly.Arduino.definitions_.define_datamatrix_code_set='void Datamatrix_Code_Send() {\n    String TT = "{\\"mode\\": \\"DATAMATRIX\\", \\"FIND CODE\\": 1.0}";\n    char input_[64] = "";\n    TT.toCharArray(input_, 64);\n    Serial2_.print(input_);\n}\n';
  return "for(int i=0;i<3;i++){Datamatrix_Code_Send();delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_datamatrix_code_count=function(){
  Blockly.Arduino.definitions_.define_datamatrix_code_count='String Datamatrix_Code_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"count\\":");\n    String retotal_ = String(Text_[total_+9]);\n    return retotal_;\n  }\n }\n';
  return["Datamatrix_Code_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_datamatrix_code_data=function(){
  Blockly.Arduino.definitions_.define_datamatrix_code_data='String Datamatrix_Code_data_(int box_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int payload = new_Text_.indexOf("\\"payload\\":");\n    int ends = new_Text_.indexOf(", \\"rotation\\":");\n    String payload_;\n    for (int i=payload+10; i<ends; i++) {\n      payload_ += new_Text_[i];\n    }\n    return payload_;\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return["Datamatrix_Code_data_("+a+")",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_april_tag_set=function(){
  Blockly.Arduino.definitions_.define_april_tag_set='void April_Tag_Send() {\n    String TT = "{\\"mode\\": \\"APRILTAG\\", \\"FIND CODE\\": 1.0}";\n    char input_[64] = "";\n    TT.toCharArray(input_, 64);\n    Serial2_.print(input_);\n}\n';
  return "for(int i=0;i<3;i++){April_Tag_Send();delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_april_tag_count=function(){
  Blockly.Arduino.definitions_.define_april_tag_count='String April_Tag_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"count\\":");\n    String retotal_ = String(Text_[total_+9]);\n    return retotal_;\n  }\n}\n';
  return["April_Tag_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_april_tag_data=function(){
  Blockly.Arduino.definitions_.define_april_tag_data='String April_Tag_data_(int box_, int data_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int id = new_Text_.indexOf("\\"id\\":");\n    int family = new_Text_.indexOf(", \\"family\\":");\n    int ends = new_Text_.indexOf(", \\"cx\\":");\n    if (data_ == 0) {\n      String id_;\n      for (int i=id+5; i<family; i++) {\n        id_ += new_Text_[i];\n      }\n      return id_;\n\n    }\n    else {\n      String family_;\n      for (int i=family+11; i<ends; i++) {\n        family_ += new_Text_[i];\n      }\n      return family_;\n    }\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("m5_stack_v_april_tag_data");
  if (b == "m5_id") {
      return["April_Tag_data_("+a+", 0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["April_Tag_data_("+a+", 1)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_tag_reader_count=function(){
  Blockly.Arduino.definitions_.define_april_tag_count='String Tag_Reader_Count_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int total_ = Text_.indexOf("\\"TOTAL\\":");\n    String retotal_ = String(Text_[total_+8]);\n    return retotal_;\n  }\n}\n';
  return["Tag_Reader_Count_()",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.m5_stack_v_tag_reader_data=function(){
  Blockly.Arduino.definitions_.define_april_tag_data='String Tag_Reader_data_(int box_, int data_) {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    String scandata_ = "\\"" + String(box_) +"\\"";\n    String new_Text_;\n    for (int i=Text_.indexOf(scandata_); i<Text_.length(); i++) {\n      new_Text_ += Text_[i];\n    }\n    int code = new_Text_.indexOf(",\\"code\\":");\n    int binstr = new_Text_.indexOf(",\\"binstr\\":");\n    int ends = new_Text_.indexOf("}");\n    if (data_ == 0) {\n      String code_;\n      for (int i=code+8; i<binstr; i++) {\n        code_ += new_Text_[i];\n      }\n      return code_;\n    }\n    else {\n      String binstr_;\n      for (int i=binstr+10; i<ends; i++) {\n        binstr_ += new_Text_[i];\n      }\n      return binstr_;\n    }\n  }\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"BOX",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=this.getFieldValue("m5_stack_v_tag_reader_data");
  if (b == "m5_code") {
      return["Tag_Reader_data_("+a+", 0)",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["Tag_Reader_data_("+a+", 1)",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.m5_stack_v_line_tracker_lab=function(){
  Blockly.Arduino.definitions_.define_color_trace_lab='void Line_Tracker_LAB_Send(int Lmin_, int Lmax_, int Amin_, int Amax_, int Bmin_, int Bmax_) {\n    String TT = "{\\"Amax\\": "+ String(Amax_) +", \\"Bmax\\": "+ String(Bmax_) +", \\"LINE TRACKER\\": 1.0, \\"Lmin\\": "+ String(Lmin_) +", \\"Lmax\\": "+ String(Lmax_) +", \\"Bmin\\": "+ String(Bmin_) +", \\"Amin\\": "+ String(Amin_) +"}";\n    char input_[256] = "";\n    TT.toCharArray(input_, 256);\n    Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"Lmin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"Lmax_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      c=Blockly.Arduino.valueToCode(this,"Amin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      d=Blockly.Arduino.valueToCode(this,"Amax_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      e=Blockly.Arduino.valueToCode(this,"Bmin_",Blockly.Arduino.ORDER_ATOMIC)||"0",
      f=Blockly.Arduino.valueToCode(this,"Bmax_",Blockly.Arduino.ORDER_ATOMIC)||"0";
  return "for(int i=0;i<3;i++){Line_Tracker_LAB_Send("+a+", "+b+", "+c+", "+d+", "+e+", "+f+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_line_tracker_weight=function(){
  Blockly.Arduino.definitions_.define_color_trace_lab='void Line_Tracker_Weight_Send(float w0_, float w1_, float w2_) {\n    String TT = "{\\"weight_1\\": "+ String(w1_) +", \\"weight_2\\": "+ String(w2_) +", \\"weight_0\\": "+ String(w0_) +", \\"LINE TRACKER\\": 1.0}";\n    char input_[256] = "";\n    TT.toCharArray(input_, 256);\n    Serial2_.print(input_);\n}\n';
  var a=Blockly.Arduino.valueToCode(this,"W0_",Blockly.Arduino.ORDER_ATOMIC)||"0.1",
      b=Blockly.Arduino.valueToCode(this,"W1_",Blockly.Arduino.ORDER_ATOMIC)||"0.2",
      c=Blockly.Arduino.valueToCode(this,"W2_",Blockly.Arduino.ORDER_ATOMIC)||"0.7";
  return "for(int i=0;i<3;i++){Line_Tracker_Weight_Send("+a+", "+b+", "+c+");delay(50);}\n";
};

Blockly.Arduino.m5_stack_v_line_tracker_data=function(){
  Blockly.Arduino.definitions_.define_april_tag_count='String Line_Tracker_data_() {\n  String Text_ = Data_Main_Receive();\n  if (Text_ == "None") {\n    return "None";\n  }\n  else {\n    int angel = Text_.indexOf("\\"angle\\":");\n    int ends = Text_.indexOf("}");\n    String angel_;\n    for (int i=angel+8; i<ends; i++) {\n      angel_ += Text_[i];\n    }\n    return angel_;\n  }\n}\n';
  return["Line_Tracker_data_()",Blockly.Arduino.ORDER_ATOMIC];
};

// PCA9685
Blockly.Arduino.pca9685={};
Blockly.Arduino.pca9685_init=function(){
  Blockly.Arduino.definitions_.define_pca9685_init="#include <Wire.h>";
  Blockly.Arduino.definitions_.define_pca9685_init2="#include <Adafruit_PWMServoDriver.h>";
  Blockly.Arduino.definitions_["define_pca9685_init3"]="Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();\n";
  Blockly.Arduino.setups_["setup_pac9685_"]="pwm.begin();\n  pwm.setOscillatorFrequency(27000000);\n  pwm.setPWMFreq(50);\n  Wire.setClock(400000);\n";
  return""
};

Blockly.Arduino.pca9685_pwm_write=function(){
  var a=Blockly.Arduino.valueToCode(this,"Channel",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"Value",Blockly.Arduino.ORDER_ATOMIC)||"4095";
  Blockly.Arduino.definitions_.define_pwm_write="void pwmset(int ch_, int pwm_) {\n  if (pwm_ < 0)pwm_ = 0;\n  if (pwm_ > 4095)pwm_ = 4095;\n  pwm.setPWM(ch_, 0, (pwm_ + (4096/16)*0) % 4096 );\n}\n";
  return"pwmset("+a+", "+b+");\n";
};

Blockly.Arduino.pca9685_servo_init=function(){
  var a=Blockly.Arduino.valueToCode(this,"pulse_min",Blockly.Arduino.ORDER_ATOMIC)||"600",
      b=Blockly.Arduino.valueToCode(this,"pulse_max",Blockly.Arduino.ORDER_ATOMIC)||"2400";
  Blockly.Arduino.definitions_["define_pca9685_init4"]="int servomin = "+a+";\nint servomax = "+b+";\n";
  return""
};

Blockly.Arduino.pca9685_servo_write=function(){
  var a=Blockly.Arduino.valueToCode(this,"Channel",Blockly.Arduino.ORDER_ATOMIC)||"0",
      b=Blockly.Arduino.valueToCode(this,"Degree",Blockly.Arduino.ORDER_ATOMIC)||"180";
  Blockly.Arduino.definitions_.define_servo_write="void servoset(int ch_, int deg_) {\n  if (deg_ < 0)deg_ = 0;\n  if (deg_ > 180)deg_ = 180;\n  int pulse_ = map(deg_, 0, 180, servomin, servomax);\n  pwm.writeMicroseconds(ch_, pulse_);\n}\n";
  return"servoset("+a+", "+b+");\n";
};

// Sensor Big
Blockly.Arduino.sensor_big={};
Blockly.Arduino.pms5003_t_read=function(){
  var a=this.getFieldValue("RX_PIN"),
      b=this.getFieldValue("TX_PIN");
  Blockly.Arduino.definitions_.define_pms5003T_init="#include <SoftwareSerial.h>";
  Blockly.Arduino.definitions_.define_pms_receive_inst="SoftwareSerial pms5003tSerial("+a+", "+b+");\nlong pmat10_ = 0;\nlong pmat25_ = 0;\nlong pmat100_ = 0;\nlong Temp_ = 0;\nlong Humid_ = 0;\nchar buf[50];\n";
  Blockly.Arduino.setups_["setup_pms5003_t_"]="pms5003tSerial.begin(9600);\n";
  Blockly.Arduino.definitions_.define_pms5003_t_read_="void retrievepm25(){\n  int count = 0;\n  unsigned char c;\n  unsigned char high;\n  while (pms5003tSerial.available()) {\n     c = pms5003tSerial.read();\n     if((count==0 && c!=0x42) || (count==1 && c!=0x4d)){\n       break;\n     }\n     if(count > 27){\n       break;\n     }\n      else if(count == 10 || count == 12 || count == 14 || count == 24 || count == 26) {\n       high = c;\n     }\n     else if(count == 11){\n       pmat10_ = 256*high + c;\n     }\n     else if(count == 13){\n       pmat25_ = 256*high + c;\n     }\n     else if(count == 15){\n       pmat100_ = 256*high + c;\n     }\n      else if(count == 25){\n          Temp_ = (256*high + c)/10;\n     }\n     else if(count == 27){\n                  Humid_ = (256*high + c)/10;\n    }       count++;\n  }  while(pms5003tSerial.available()) pms5003tSerial.read();\n}\n";
  return"retrievepm25();\n"
};

Blockly.Arduino.pms5003_t_read_sensor=function(){
  var a=this.getFieldValue("PMS_CHOOSE");
  if (a == "pms_read_PM1") {
    return["pmat10_",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "pms_read_PM2"){
    return["pmat25_",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "pms_read_PM10"){
    return["pmat100_",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "pms_read_Temp"){
    return["Temp_",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["Humid_",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.sgp30_read=function(){
  Blockly.Arduino.definitions_.define_sgp30_init="#include \"SparkFun_SGP30_Arduino_Library.h\"\n#include <Wire.h>\n";
  Blockly.Arduino.definitions_.define_sgp30_inst2="SGP30 sgp30Sensor;;\n";
  Blockly.Arduino.setups_["setup_sgp30_"]="Wire.begin();\n  sgp30Sensor.begin();\n  sgp30Sensor.initAirQuality();\n";
  return"sgp30Sensor.measureAirQuality();\n"
};

Blockly.Arduino.sgp30_read_sensor=function(){
  var a=this.getFieldValue("SGP30_CHOOSE");
  if (a == "SGP30_TVOC") {
    return["sgp30Sensor.TVOC",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
    return["sgp30Sensor.CO2",Blockly.Arduino.ORDER_ATOMIC];
  }
};


Blockly.Arduino.m5_mini_rfid=function() {
  Blockly.Arduino.definitions_.define_m5_mini_rfid_include="#include <Wire.h>\n#include \"MFRC522_I2C.h\"\n";
  Blockly.Arduino.definitions_.define_m5_mini_rfid_init="MFRC522 mfrc522(0x28);\n";
  Blockly.Arduino.definitions_.define_m5_mini_rfid_string="String readRFID() {\n  String mfrc522ReadCode = \"\";\n  if ( ! mfrc522.PICC_IsNewCardPresent() || ! mfrc522.PICC_ReadCardSerial() ) {}\n  else {\n    for (byte i = 0; i < mfrc522.uid.size; i++) {\n      mfrc522ReadCode += String(mfrc522.uid.uidByte[i], HEX);\n    }\n  }\n  return mfrc522ReadCode;\n}\n";
  Blockly.Arduino.setups_["m5_mini_rfid_init"]="Wire.begin();\n  mfrc522.PCD_Init();\n";
  return["readRFID()",Blockly.Arduino.ORDER_ATOMIC];
};

// HUSKYLENS
Blockly.Arduino.huskylens={};
Blockly.Arduino.huskylens_i2c_init=function() {
  Blockly.Arduino.definitions_.define_huskylens="#include \"HUSKYLENS.h\"";
  Blockly.Arduino.definitions_.define_huskylens_init="HUSKYLENS huskylens;";
  Blockly.Arduino.setups_["huskylens_init"]="Wire.begin();\n  while (!huskylens.begin(Wire)) {\n    Serial.println(F(\"Begin failed!\"));\n    Serial.println(F(\"1.Please recheck the \\\"Protocol Type\\\" in HUSKYLENS (General Settings>>Protocol Type>>I2C)\"));\n    Serial.println(F(\"2.Please recheck the connection.\"));\n    delay(100);\n  }\n";
  return"";
};

Blockly.Arduino.huskylens_uart_init=function() {
  var a=this.getFieldValue("RX_PIN"),
      b=this.getFieldValue("TX_PIN");
  Blockly.Arduino.definitions_.define_huskylens="#include \"HUSKYLENS.h\"\n#include \"SoftwareSerial.h\"\n";
  Blockly.Arduino.definitions_.define_huskylens_init="HUSKYLENS huskylens;\nSoftwareSerial mySerial("+a+", "+b+");\nvoid printResult(HUSKYLENSResult result);\n";
  Blockly.Arduino.setups_["huskylens_init"]="mySerial.begin(9600);\n  while (!huskylens.begin(mySerial)) {\n    Serial.println(F(\"Begin failed!\"));\n    Serial.println(F(\"1.Please recheck the \\\"Protocol Type\\\" in HUSKYLENS (General Settings>>Protocol Type>>Serial 9600)\"));\n    Serial.println(F(\"2.Please recheck the connection.\"));\n    delay(100);\n  }\n";
  return"";
};

Blockly.Arduino.huskylens_set_mode=function() {
  var a=this.getFieldValue("MODE_LIST");
  if (a == "FR") {
      return"huskylens.writeAlgorithm(ALGORITHM_FACE_RECOGNITION);\n";
  }
  else if (a == "OT") {
      return"huskylens.writeAlgorithm(ALGORITHM_OBJECT_TRACKING);\n";
  }
  else if (a == "OR") {
      return"huskylens.writeAlgorithm(ALGORITHM_OBJECT_RECOGNITION);\n";
  }
  else if (a == "LT") {
      return"huskylens.writeAlgorithm(ALGORITHM_LINE_TRACKING);\n";
  }
  else if (a == "CR") {
      return"huskylens.writeAlgorithm(ALGORITHM_COLOR_RECOGNITION);\n";
  }
  else if (a == "TR") {
      return"huskylens.writeAlgorithm(ALGORITHM_TAG_RECOGNITION);\n";
  }
  else {
      return"huskylens.writeAlgorithm(ALGORITHM_OBJECT_CLASSIFICATION);\n";
  }
};

Blockly.Arduino.huskylens_read_data=function() {
  Blockly.Arduino.definitions_.define_huskylens_init_array="int readData[5] = {};\nbyte dataType = 0;\nbyte idCount = 0;\n";
  return"if (!huskylens.request()) {\n  Serial.println(F(\"Fail to request data from HUSKYLENS, recheck the connection!\"));\n}\nelse {\n  if (huskylens.available()) {\n    HUSKYLENSResult result = huskylens.read();\n    idCount = huskylens.countLearned();\n    if (result.command == COMMAND_RETURN_BLOCK){\n      dataType = 0;\n      readData[0] = result.xCenter;\n      readData[1] = result.yCenter;\n      readData[2] = result.width;\n      readData[3] = result.height;\n      readData[4] = result.ID;\n    }\n    else if (result.command == COMMAND_RETURN_ARROW){\n      dataType = 1;\n      readData[0] = result.xOrigin;\n      readData[1] = result.yOrigin;\n      readData[2] = result.xTarget;\n      readData[3] = result.yTarget;\n      readData[4] = result.ID;\n    }\n    else {\n      for (byte i=0; i<5; i++) {\n        readData[i] = 0;\n      }\n    }\n  }\n}\n";
};

Blockly.Arduino.huskylens_get_data_block=function() {
  var a=this.getFieldValue("BLOCK_DATA");
  if (a == "XC") {
      return["readData[0]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "YC") {
      return["readData[1]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "BW") {
      return["readData[2]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "BH") {
      return["readData[3]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["readData[4]",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.huskylens_get_data_arrow=function() {
  var a=this.getFieldValue("ARROW_DATA");
  if (a == "XO") {
      return["readData[0]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "YO") {
      return["readData[1]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "XT") {
      return["readData[2]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else if (a == "YT") {
      return["readData[3]",Blockly.Arduino.ORDER_ATOMIC];
  }
  else {
      return["readData[4]",Blockly.Arduino.ORDER_ATOMIC];
  }
};

Blockly.Arduino.huskylens_show_text=function() {
  var a=Blockly.Arduino.valueToCode(this,"show_text",Blockly.Arduino.ORDER_ATOMIC)||"Text",
      b=Blockly.Arduino.valueToCode(this,"x_axis",Blockly.Arduino.ORDER_ATOMIC)||0,
      c=Blockly.Arduino.valueToCode(this,"y_axis",Blockly.Arduino.ORDER_ATOMIC)||0;
  return"huskylens.customText("+a+", "+b+", "+c+");\n";
};

Blockly.Arduino.huskylens_clear_screen=function() {
  return"huskylens.clearCustomText();\n";
};

Blockly.Arduino.huskylens_count_learned=function() {
  return["idCount",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.huskylens_write_learn=function() {
  var a=Blockly.Arduino.valueToCode(this,"learn_id",Blockly.Arduino.ORDER_ATOMIC)||"1";
  return"huskylens.writeLearn("+a+");\n";
};

Blockly.Arduino.huskylens_write_forget=function() {
  return"huskylens.writeForget();\n";
};

Blockly.Arduino.huskylens_learned_id=function() {
  var a=Blockly.Arduino.valueToCode(this,"learned_id",Blockly.Arduino.ORDER_ATOMIC)||"1";
  return["huskylens.isLearned("+a+")",Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.huskylens_set_id_name=function() {
  var a=Blockly.Arduino.valueToCode(this,"set_id",Blockly.Arduino.ORDER_ATOMIC)||1,
      b=Blockly.Arduino.valueToCode(this,"set_name",Blockly.Arduino.ORDER_ATOMIC)||"Name";
  return"huskylens.setCustomName("+b+", "+a+");\n";
};

Blockly.Arduino.huskylens_save_picture_to_sd=function() {
  return"huskylens.savePictureToSDCard();\n";
};

Blockly.Arduino.huskylens_sl_model_to_sd=function() {
  var a=this.getFieldValue("MODEL_CHOOSE"),
      b=Blockly.Arduino.valueToCode(this,"choose_id",Blockly.Arduino.ORDER_ATOMIC)||1;
  if (a == "SAVE") {
      return"huskylens.saveModelToSDCard("+b+");\n";
  }
  else {
      return"huskylens.loadModelFromSDCard("+b+");\n";
  }
};